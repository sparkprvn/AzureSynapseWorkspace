{
	"name": "worldcupanalysis",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "worldcupgroup",
						"type": "DatasetReference"
					},
					"name": "wcgroups",
					"description": "Add wc groups"
				},
				{
					"dataset": {
						"referenceName": "squadworldcup",
						"type": "DatasetReference"
					},
					"name": "wcsquad",
					"description": "Add squad wc"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outputwc",
						"type": "DatasetReference"
					},
					"name": "savedata"
				}
			],
			"transformations": [
				{
					"name": "groupsquad"
				},
				{
					"name": "squadgoals",
					"description": "Add goals agg by squad"
				},
				{
					"name": "casttypes"
				},
				{
					"name": "squaddata"
				},
				{
					"name": "selectsquad"
				},
				{
					"name": "castsquaddata"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Group as string,",
				"          Team as string,",
				"          {FIFA Ranking} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> wcgroups",
				"source(output(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string,",
				"          Column_4 as string,",
				"          Column_5 as string,",
				"          Column_6 as string,",
				"          Column_7 as string,",
				"          Column_8 as string,",
				"          Column_9 as string,",
				"          Column_10 as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> wcsquad",
				"wcgroups, squaddata join(Team == SquadTeam,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> groupsquad",
				"casttypes aggregate(groupBy(Player),",
				"     {WC Goals} = avg({WC Goals})) ~> squadgoals",
				"groupsquad cast(output(",
				"          {WC Goals} as integer '000'",
				"     ),",
				"     errors: true) ~> casttypes",
				"selectsquad select(mapColumn(",
				"          ID,",
				"          SquadTeam,",
				"          Position,",
				"          Player,",
				"          Age,",
				"          Caps,",
				"          Goals,",
				"          {WC Goals} = WCGoals,",
				"          League,",
				"          Club",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> squaddata",
				"wcsquad select(mapColumn(",
				"          ID = Column_1,",
				"          SquadTeam = Column_2,",
				"          Position = Column_3,",
				"          Player = Column_4,",
				"          Age = Column_5,",
				"          Caps = Column_6,",
				"          Goals = Column_7,",
				"          WCGoals = Column_8,",
				"          League = Column_9,",
				"          Club = Column_10",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectsquad",
				"squaddata cast(output(",
				"          ID as integer '000',",
				"          Position as string",
				"     ),",
				"     errors: true) ~> castsquaddata",
				"squadgoals sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Column_1 as string,",
				"          Column_2 as string,",
				"          Column_3 as string",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> savedata"
			]
		}
	}
}